@page "/talking"
@using SisuCare.Data
@inject NavigationManager NavigationManager
<h1>@topMsg</h1>

<div class="row">
    <h2 style=@switchDisp1>@mongon</h2>
    @questionbody
</div>
<div class="row mb-1">
    <div class="col-1">
        <button class="btn link-light" style="@switchDisp; background-color: #005d64;" @onclick=SpeakText><i class="bi bi-megaphone"></i></button>
    </div>
</div>
<div class="row">
    <input style="@switchDisp2; background-color: #005d64;" type='button' class='btn link-light' @onclick=putbutton value='表示する'>
    <h1 style=@switchDisp4>@afterviewStrings</h1>
    <div class="row mb-3">
        <div class="input-group">
            <input style=@switchDisp type="text" class="form-control form-control-lg" placeholder="解答を入力してください" @bind="ans" />
        </div>
    </div>
</div>
<div class="row">
    <input type="button" class="btn link-light" style="background-color: #005d64" value="次へ" @onclick="nextQues" />
    @mong2
</div>
@code {
    [CascadingParameter]
    private ShareValues? ShareValues { get; set; }

    private readonly HttpClient Client = new HttpClient();
    public MarkupString questionbody;
    public string mongon = "「次へ」をタップすると、問診を開始します。";
    public string mong2 = "";
    public MarkupString afterviewStrings;
    public MarkupString switchDisp = (MarkupString)"display: none";
    public MarkupString switchDisp1;
    public MarkupString switchDisp2 = (MarkupString)"display: none";
    public MarkupString switchDisp3 = (MarkupString)"display: none";
    public MarkupString switchDisp4 = (MarkupString)"display: none";
    public List<ansResp> qAnswers = new List<ansResp>();
    private questionsA questions = new questionsA();
    public string topMsg = "東商式スケール";
    public string ans;
    public int nowans = 0;
    public int TotalScore = 0;

    public async void SpeakText() =>
        await TextToSpeech.Default.SpeakAsync(questions.question[nowans].voicealt);

    public async void putbutton()
    {
        switchDisp4 = (MarkupString)"";
        await InvokeAsync(StateHasChanged);
    }

    public void AnsChecker(bool iscont)
    {
        if (nowans == 0)
        {
            ans = "";
            return;
        }
        else if (nowans >= 1)
        {
            int inscore = 0;
            foreach (string value in questions.question[nowans - 1].Trueanswers)
            {
                if (ans.Contains(value))
                {
                    TotalScore += 1;
                    inscore += 1;
                }
                else if (iscont)
                {
                    nowans = nowans + (6 - nowans);
                }
            }
            qAnswers.Add(new ansResp()
                {
                    qNum = nowans,
                    score = inscore,
                    rawans = ans
                });
            ans = "";
        }
    }

    public async void nextQues()
    {
        topMsg = $"設問{nowans + 1}";
        if (questions.question.Count + 1 == nowans) { NavigationManager.NavigateTo("./"); return; }
        if (questions.question.Count == nowans)
        {
            topMsg = $"";
            AnsChecker(questions.question[nowans - 1].is_continue);
            postResult();
            switchDisp = (MarkupString)"display: none";
            questionbody = (MarkupString)"<h2>問診が完了しました。<h2><h3>「次へ」をクリックするとホームに戻ります。";
            mong2 = "送信に成功しました。";
            await InvokeAsync(StateHasChanged);
            nowans += 1;
            return;
        }
        AnsChecker(questions.question[nowans].is_continue);
        switchDisp1 = (MarkupString)"display: none";
        switchDisp = (MarkupString)"";
        if (questions.question[nowans].is_button)
        {
            switchDisp2 = (MarkupString)"";
            afterviewStrings = questions.question[nowans].afterviewStrings;
        }
        else
        {
            switchDisp2 = (MarkupString)"display: none";
            switchDisp4 = (MarkupString)"display: none";
            afterviewStrings = (MarkupString)"";
        }
        questionbody = questions.question[nowans].question;
        nowans += 1;
        await InvokeAsync(StateHasChanged);
    }

    private async void postResult()
    {
        Dictionary<string, string> requestbodies = new Dictionary<string, string>()
        {
            {"uuid", ShareValues.value.uuid},
            {"intakedate", DateTime.Now.ToString("yyyy-MM-dd")},
            {"ansbody", JsonConvert.SerializeObject(qAnswers)},
            {"total", TotalScore.ToString()}
        };
        HttpContent reqBody = new FormUrlEncodedContent(requestbodies);
        HttpResponseMessage resp = await Client.PostAsync("https://api.schnetworks.net/v1/intake-res.php", reqBody).ConfigureAwait(false);
        string json = await resp.Content.ReadAsStringAsync();
        var js_l = JsonConvert.DeserializeObject<AccountService.OtherAccountRoot>(json);
        if (js_l.RespInfo.Code < 300 && js_l.RespInfo.Code >= 200)
        {
            return;
        }
    }

    public class ansResp
    {
        public int qNum { get; set; }
        public int score { get; set; }
        public string? rawans { get; set; }
    }
}