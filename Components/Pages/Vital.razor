@page "/vital"
@using PleasureCare.Data
@using MeCab
@inject NavigationManager NavigationManager
@using System.Linq

<div style="@((MarkupString)sw_form)">
    <p>身長</p>
    <div class="row mb-3">
        <div class="input-group">
            <input type="text" class="form-control form-control-lg" id="shintyoBox" placeholder="身長" @bind="tall" />
            <label class="input-group-text">cm</label>
        </div>
    </div>

    <p>体重</p>
    <div class="row mb-3">
        <div class="input-group">
            <input type="text" class="form-control form-control-lg" id="taijuBox" placeholder="体重" @bind="weight" />
            <label class="input-group-text">Kg</label>
        </div>
    </div>
    <!-----
        毎朝記録するやつ
    ----->
    <p>体温</p>
    <div class="row mb-3">
        <div class="input-group">
            <input type="text" class="form-control form-control-lg" id="taionBox" placeholder="体温" @bind="bodytemp" />
            <label class="input-group-text">℃</label>
        </div>
    </div>
    <p>血圧</p>
    <div class="row mb-3">
        <div class="input-group">
            <input type="text" class="form-control form-control-lg" id="ketsuatsuUp" placeholder="血圧(収縮)" @bind="ketsuatsuUp" />
            <label class="input-group-text">／</label>
            <input type="text" class="form-control form-control-lg" id="ketsuatsuLow" placeholder="血圧(拡張)" @bind="ketsuatsuLow" />
            <label class="input-group-text">mmHg</label>
        </div>
    </div>
    <p>SpO2</p>
    <div class="row mb-3">
        <div class="input-group">
            <input type="text" class="form-control form-control-lg" id="spoxygenBox" placeholder="SpO2" @bind="spoxygen" />
            <label class="input-group-text">％</label>
        </div>
    </div>
    <p>就寝時間</p>
    <div class="row mb-3">
        <div class="input-group">
            <select class="form-control form-control-lg" id="syuusinHour" @bind="gotobedh">
                <option value="" disabled selected>時</option>
                @for (int i = 0; i < 24; i++)
                {
                    <option value="@i.ToString("00")">@i</option>
                }
            </select>
            <label class="input-group-text">時</label>
            <select class="form-control form-control-lg" id="syuusinMinute" @bind="gotobedm">
                <option value="" disabled selected>分</option>
                @for (int i = 0; i < 60; i += 5)
                {
                    <option value="@i.ToString("00")">@i.ToString("00")</option>
                }
            </select>
            <label class="input-group-text">分</label>
        </div>
    </div>

    <p>起床時間</p>
    <div class="row mb-3">
        <div class="input-group">
            <select class="form-control form-control-lg" id="kisyouHour" @bind="wakeuph">
                <option value="" disabled selected>時</option>
                @for (int i = 0; i < 24; i++)
                {
                    <option value="@i.ToString("00")">@i</option>
                }
            </select>
            <label class="input-group-text">時</label>
            <select class="form-control form-control-lg" id="kisyouMinute" @bind="wakeupm">
                <option value="" disabled selected>分</option>
                @for (int i = 0; i < 60; i += 5)
                {
                    <option value="@i.ToString("00")">@i.ToString("00")</option>
                }
            </select>
            <label class="input-group-text">分</label>
        </div>
    </div>
    <!-----
        毎晩記録するやつ
    ----->
    <p>歩数</p>
    <div class="row mb-3">
        <div class="input-group">
            <input type="text" class="form-control form-control-lg" id="hosuuBox" placeholder="歩数" @bind="steps" />
            <label class="input-group-text">歩</label>
        </div>
    </div>

    <p>食事内容</p>
    <div class="row mb-3">
        <div class="input-group">
            <textarea class="form-control" id="syokuziBox" rows="3" placeholder="ここに食べたもの(料理名)を入力してください" @bind="eatgohan"></textarea>
        </div>
    </div>

</div>
@((MarkupString)message)

<a href="/" style="@((MarkupString)backbutton); background-color: #005d64" class="btn btn-primary">ホームに戻る</a>
<div class="row mt-5">
    <div class="d-flex justify-content-end">
        <input style="@((MarkupString)sw_form); background-color: #005d64" type="button" class="btn link-light col-4 " value="送信" @onclick="ResultSender" />
    </div>
</div>
<!-----
    サイズ調整
----->
<script>
    function scrollIntoView(element) {
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
</script>


@code {
    string weight;
    string tall;
    string steps;
    string ketsuatsuUp;
    string ketsuatsuLow;
    string bodytemp;
    string spoxygen;
    string wakeuph;
    string wakeupm;
    string gotobedh;
    string gotobedm;
    string message;
    string sw_form;
    string eatgohan;
    string backbutton = "display: none";

    private readonly HttpClient client = new HttpClient();

    [CascadingParameter]
    private ShareValues? ShareValues { get; set; }

    private async Task<string> ExtGohan(string? eatgohans)
    {
        APIRef.DataBody respdata = new APIRef.DataBody();
        List<APIRef.DataBody> respdatat = new List<APIRef.DataBody>();
        var tagger = MeCabTagger.Create();
        foreach(var node in tagger.ParseToNodes(eatgohans)) //抽出された単語でforeach
        {
            if(0 < node.CharType) //おまじない
            {
                if ((node.Feature).Contains("名詞")) //出てきた単語が名詞なら
                {
                    APIRef.FoodsAPI js = new APIRef.FoodsAPI();
                    try
                    {
                        var res = await client.GetStringAsync($"http://api.schnetworks.net/v1/searchfoods.php?name={node.Surface}").ConfigureAwait(false);
                        js = JsonConvert.DeserializeObject<APIRef.FoodsAPI>(res);
                    }
                    catch
                    {
                        js = new APIRef.FoodsAPI() { RespInfo = new AccountService.RespInfo() { Code = 404 } };
                    }
                    if(js.RespInfo.Code == 404) //見つからなかった
                    {
                        continue; //つづく
                    }
                    else
                    {
                        respdatat.Add(new APIRef.DataBody()
                        {
                                foodName = node.Surface,
                                protain = js.DataBody.Average(el => el.protain),
                                shokumotsusenni = js.DataBody.Average(el => el.shokumotsusenni),
                                vitaminBs = js.DataBody.Average(el => el.vitaminBs),
                                vitaminBtwe = js.DataBody.Average(el => el.vitaminBtwe),
                                iron = js.DataBody.Average(el => el.iron),
                                aen = js.DataBody.Average(el => el.aen),
                                carushium = js.DataBody.Average(el => el.carushium),
                                solt = js.DataBody.Average(el=>el.solt)
                        });
                    }
                }
            }
        }
        respdata = new APIRef.DataBody()
        {
            protain = Math.Floor(respdatat.Sum(el => el.protain)*100)/100,
            shokumotsusenni = Math.Floor(respdatat.Sum(el => el.shokumotsusenni)*100)/100,
            vitaminBs = Math.Floor(respdatat.Sum(el => el.vitaminBs)*100)/100,
            vitaminBtwe = Math.Floor(respdatat.Sum(el => el.vitaminBtwe)*100)/100,
            iron = Math.Floor(respdatat.Sum(el => el.iron)*100)/100,
            aen = Math.Floor(respdatat.Sum(el => el.aen)*100)/100,
            carushium = Math.Floor(respdatat.Sum(el => el.carushium)*100)/100,
            solt = Math.Floor(respdatat.Sum(el => el.solt*100)/100)
        };
        return JsonConvert.SerializeObject(respdata);
    }

    public string jikokumaker(string type = "",string jikoku = "")
    {
        string resp = "1970/01/01 00:00:00";
        DateTime intime = DateTime.Parse(jikoku);
        if(intime.TimeOfDay >= DateTime.Now.TimeOfDay && type == "goto") //寝た時分が今の時分より遅い→昨日
        {
            resp = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day - 1, intime.Hour, intime.Minute, intime.Second).ToString("yyyy/MM/dd HH:mm:ss");
        }
        else if (intime.TimeOfDay <= DateTime.Now.TimeOfDay && type == "goto") //寝た時分が今の時分より早い→今日
        {
            resp = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, intime.Hour, intime.Minute, intime.Second).ToString("yyyy/MM/dd HH:mm:ss");
        }

        if (intime.TimeOfDay >= DateTime.Now.TimeOfDay && type == "wake") //起きた時分が今の時分より遅い→昨日
        {
            resp = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day - 1, intime.Hour, intime.Minute, intime.Second).ToString("yyyy/MM/dd HH:mm:ss");
        }
        else if (intime.TimeOfDay <= DateTime.Now.TimeOfDay && type == "wake") //起きた時分が今の時分より早い→今日
        {
            resp = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, intime.Hour, intime.Minute, intime.Second).ToString("yyyy/MM/dd HH:mm:ss");
        }

        return resp;
    }

    private async void ResultSender() //送信
    {
        Dictionary<string, string> vds = new Dictionary<string, string>()
        {
            { "uuid", ShareValues.value.uuid},
            { "weight",weight},
            { "tall",tall},
            { "steps", steps},
            { "gotobed",jikokumaker("goto",gotobedh + ":" + gotobedm)},
            { "wakeup",jikokumaker("wake",wakeuph + ":" + wakeupm)},
            { "eatgohan",ExtGohan(eatgohan).Result},
            {"senddate",DateTime.Now.ToString("yyyy-MM-dd")}
        };
        HttpResponseMessage resp = await client.PostAsync("https://api.schnetworks.net/v1/vital-info.php", new FormUrlEncodedContent(vds)).ConfigureAwait(false);
        string json = await resp.Content.ReadAsStringAsync();
        AccountService.OtherAccountRoot? js_l = JsonConvert.DeserializeObject<AccountService.OtherAccountRoot>(json);
        if (js_l != null)
        {
            if (js_l.RespInfo.Code == 200)
            {
                message = "<p class='alert alert-success'>データの送信に成功しました！</p>";
                sw_form = "display: none";
                backbutton = "";
            }

        }
        await InvokeAsync(StateHasChanged);
    }
}